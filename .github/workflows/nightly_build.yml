name: nightly

on:
  workflow_dispatch:
  schedule:
    # we build at 8am UTC, 3am Eastern, midnight Pacific
    - cron:  '0 8 * * 1-4'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-debian-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-debian

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build
        id: tester_build
        uses: docker/build-push-action@v2
        with:
          target: analytics-tools
          push: false
          load: true
          context: .
          file: ./docker/nightly/Dockerfile
          tags: timescaledev/timescale-analytics:tester
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Run Tests
        run: |
            docker run -d --name ts_analytics_test -e POSTGRES_HOST_AUTH_METHOD=trust timescaledev/timescale-analytics:tester
            docker exec ts_analytics_test /bin/bash -c 'PATH=\"${PATH}:/root/.cargo/bin\" \
              && cd /rust/timescale-analytics/crates \
              && cargo test --release --workspace --exclude timescale_analytics'
            docker stop ts_analytics_test
          # TODO we also want to run our extension tests, but we don't want to restart the DB, need a pgx patch

          #TODO run doctests

      - name: Push
        id: image_build
        uses: docker/build-push-action@v2
        with:
          push: true
          context: .
          file: ./docker/nightly/Dockerfile
          tags: timescaledev/timescale-analytics:nightly

      - name: Image digest
        run: echo ${{ steps.image_build.outputs.digest }}
